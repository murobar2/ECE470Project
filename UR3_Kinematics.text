%UR3_Kinematic
function sysCall_threadmain()
    b=sim.getObjectHandle('BaxterVacuumCup')
    objectName=sim.getObjectName(b)
    --initializing joint handles
    jointHandles={-1,-1,-1,-1,-1,-1}
    for i=1,6,1 do
        jointHandles[i]=sim.getObjectHandle('UR3_joint'..i)
    end
    
    --obtaining handles for reference
    rear_camera = sim.getObjectHandle('blob_camera_rear')
    
    end_effector = sim.getObjectHandle('BaxterVacuumCup_loopClosureDummy1')
   
    UR3 =sim.getObjectAssociatedWithScript(sim.handle_self)
    UR3_base = sim.getObjectHandle("DummyB")
    
    --initialize parameters
    vel=80
    accel=25
    jerk=55
    currentVel={0,0,0,0,0,0,0}
    currentAccel={0,0,0,0,0,0,0}
    maxVel={vel*math.pi/180,vel*math.pi/180,vel*math.pi/180,vel*math.pi/180,vel*math.pi/180,vel*math.pi/180}
    maxAccel={accel*math.pi/180,accel*math.pi/180,accel*math.pi/180,accel*math.pi/180,accel*math.pi/180,accel*math.pi/180}
    maxJerk={jerk*math.pi/180,jerk*math.pi/180,jerk*math.pi/180,jerk*math.pi/180,jerk*math.pi/180,jerk*math.pi/180}
    targetVel={0,0,0,0,0,0}
    i = 0
    
    --Length of each link
    L1 = 0.152
    L2 = 0.120
    L3 = 0.244
    L4 = 0.093
    L5 = 0.213
    L6 = 0.083
    L7 = 0.083
    L8 = 0.082
    L9 = 0.0535
    L10 = 0.059
    
    sim.setDoubleSignal("Min_Distance1",0)
    sim.getDoubleSignal("Min_Distance1")
    sim.setDoubleSignal("Min_Distance2",0)
    sim.getDoubleSignal("Min_Distance2")
    sim.setDoubleSignal("Min_Distance3",0)
    sim.getDoubleSignal("Min_Distance3")
    sim.setDoubleSignal("UR3_Get_Ready",2)
    sim.setDoubleSignal("UR3_Collect",2)
    Min_Distance = {}
    --Start tucked
    targetPos1={-90*math.pi/180,90*math.pi/180,0*math.pi/180,0*math.pi/180,math.pi/2,0}
    sim.rmlMoveToJointPositions(jointHandles,-1,currentVel,currentAccel,maxVel,maxAccel,maxJerk,targetPos1,targetVel)
    
    --start clock while simulation is run to run for loop
    local clock = os.clock
    local t0 = clock()
    while clock() - t0 <= clock() do
        clock = os.clock
        Min_Distance1 = sim.getDoubleSignal("Min_Distance1")
        Min_Distance2 = sim.getDoubleSignal("Min_Distance2")
        Min_Distance3 = sim.getDoubleSignal("Min_Distance3")
        
        Min_Distance = {Min_Distance1,Min_Distance2,Min_Distance3}
    
        getReady = sim.getDoubleSignal("UR3_Get_Ready")
        collect = sim.getDoubleSignal("UR3_Collect")
        --print(collect)
        if getReady == 2 and collect == 2 then
        
            --Start tucked
            targetPos1={-90*math.pi/180,90*math.pi/180,0*math.pi/180,0*math.pi/180,math.pi/2,0}
            sim.rmlMoveToJointPositions(jointHandles,-1,currentVel,currentAccel,maxVel,maxAccel,maxJerk,targetPos1,targetVel)
        end

        if getReady == 1 then
            
            print("UR3 getting ready..")
            --Up position
            targetPos2={math.pi/2,25*math.pi/180,100*math.pi/180,-35*math.pi/180,-90*math.pi/180,0*math.pi/180}
            sim.rmlMoveToJointPositions(jointHandles,-1,currentVel,currentAccel,maxVel,maxAccel,maxJerk,targetPos2,targetVel)
            --sim.wait(2)
        else
            previousDistance = Min_Distance
        end    
        while collect == 1 and getReady == 0 do
            
            print("UR3 collecting..")
            sim.setIntegerSignal(objectName..'_active',1)
            sim.clearDoubleSignal("Min_Distance1")
            sim.clearDoubleSignal("Min_Distance2")
            sim.clearDoubleSignal("Min_Distance3")
            
            --theta = InverseK(previousDistance)
            --sim.rmlMoveToJointPositions(jointHandles,-1,currentVel,currentAccel,maxVel,maxAccel,maxJerk,theta,targetVel)
            --sim.wait(3)
            --print(sim.getObjectPosition(end_effector,rear_camera))
            --print(sim.getObjectPosition(end_effector,UR3))
            
            --down position
             targetPos3={math.pi/2-.2,123*math.pi/180,6*math.pi/180,-42*math.pi/180,-math.pi/2,0}
            sim.rmlMoveToJointPositions(jointHandles,-1,currentVel,currentAccel,maxVel,maxAccel,maxJerk,targetPos3,targetVel)

            sim.setDoubleSignal("UR3_Collect",0)
            --getReady = sim.getDoubleSignal("UR3_Get_Ready")
            collect = sim.getDoubleSignal("UR3_Collect")
        end

        if getReady == 0 and collect ==0 then
            if alternate == 0 then
                --Up position
                up={math.pi/2,25*math.pi/180,100*math.pi/180,-35*math.pi/180,-90*math.pi/180,0*math.pi/180}
                sim.rmlMoveToJointPositions(jointHandles,-1,currentVel,currentAccel,maxVel,maxAccel,maxJerk,up,targetVel)
                --sim.wait(2)
                
                --Right side
                Rightside = {-35*math.pi/180,0*math.pi/180,130*math.pi/180,-55*math.pi/180,-90*math.pi/180,0*math.pi/180}
                sim.rmlMoveToJointPositions(jointHandles,-1,currentVel,currentAccel,maxVel,maxAccel,maxJerk,Rightside,targetVel)
                sim.setIntegerSignal(objectName..'_active',0)
                --sim.wait(2)
                
                alternate = 1
                sim.setDoubleSignal("UR3_Get_Ready",2)
                sim.setDoubleSignal("UR3_Collect",2)
                
            else
                --Up position
                up={math.pi/2,25*math.pi/180,100*math.pi/180,-35*math.pi/180,-90*math.pi/180,0*math.pi/180}
                sim.rmlMoveToJointPositions(jointHandles,-1,currentVel,currentAccel,maxVel,maxAccel,maxJerk,up,targetVel)
                --sim.wait(2)
                
                --Left side
                Leftside={35*math.pi/180,-0*math.pi/180,-45*math.pi/180,65*math.pi/180,math.pi/2,0}
                sim.rmlMoveToJointPositions(jointHandles,-1,currentVel,currentAccel,maxVel,maxAccel,maxJerk,Leftside,targetVel)
                sim.setIntegerSignal(objectName..'_active',0)
                --sim.wait(2)
                
                alternate = 0
                sim.setDoubleSignal("UR3_Get_Ready",2)
                sim.setDoubleSignal("UR3_Collect",2)
            end
        end
    end
end
function MatMul( m1, m2 )
    if #m1[1] ~= #m2 then       -- inner matrix-dimensions must agree
        return nil      
    end 
 
    local res = {}
 
    for i = 1, #m1 do
        res[i] = {}
        for j = 1, #m2[1] do
            res[i][j] = 0
            for k = 1, #m2 do
                res[i][j] = res[i][j] + m1[i][k] * m2[k][j]
                --print(res[i][j])
            end
        end
    end
 
    return res
end
 


function MatAdd( m1, m2 )
    if #m1 ~= #m2 or #m1[1] ~= #m2[1] then       -- matrix-dimensions must agree
        return nil      
    end 
 
    local res = {}
 
    for i = 1, #m1 do
        res[i] = {}
        for j = 1, #m2[1] do
            res[i][j] = m1[i][j] + m2[i][j]
        end
    end
 
    return res
end
function InverseK(Input)

    --UR3 Inverse Kinematics

    
    Input = {{previousDistance[1]},{previousDistance[2]},{previousDistance[3]},{0}};
    print(Input)
    --Create tranformation matrix T_0W convert world coordinates into frame of
    --base
    --R_0W = {{1,0,0},{0,1,0},{0,0,1}};
    --P_0W = {{0.15},{-0.15},{-0.01}};
    --T_0W = {{R_0W,P_0W},{0,0,0,1}};
    --T_0W = {{1,0,0,0.15},{0,1,0,-0.15},{0,0,1,-0.01},{0,0,0,1}}
    T_OW = sim.getObjectMatrix(rear_camera,UR3_base)
    --T_OW[12] = T_OW[12]+0.04302
    T_OW = {{T_OW[1],T_OW[2],T_OW[3],T_OW[4]},{T_OW[5],T_OW[6],T_OW[7],T_OW[8]},{T_OW[9],T_OW[10],T_OW[11],T_OW[12]},{0,0,0,1}}
    --Extract position and yaw from input
    p_w_grip = {Input[1],Input[2],Input[3],{1}};
    --print(p_w_grip)
    YAW = Input[4][1];
    --Change frame from world coordinates
    P_0g = MatMul(T_OW,p_w_grip);
    --print(P_0g)
    p_0_grip = {P_0g[1],P_0g[2],P_0g[3]};
    --print(p_0_grip)
    Distance = math.sqrt(p_0_grip[1][1]^2 + p_0_grip[2][1]^2 + p_0_grip[3][1]^2)
    --print(Distance)
    if Distance < 0.5 then
    --Find P_center
    p_xc = p_0_grip[1][1]-L9*math.cos(YAW);
    p_yc = p_0_grip[2][1]-L9*math.sin(YAW);
    p_zc = p_0_grip[3][1];
    P_center = {{p_xc},{p_yc},{p_zc}};
    --print(P_center)
    --From P_center, find theta1
    Lc = math.sqrt(P_center[1][1]^2 + P_center[2][1]^2);
    Loff = math.sqrt(Lc^2-(L6+0.027)^2);
    alpha = math.acos(((L6+0.027)^2-Loff^2-Lc^2)/(-2*Loff*Lc));
    beta = math.atan2(p_yc,p_xc);
    theta1 = (beta-alpha);
    --Theta5 is constrained to -90 degrees in this lab
    theta5 = -math.pi /2;
    --Using the YAW and theta1 find theta6
    --theta6 = (math.pi/2)-(YAW-theta1);
    --Find theta2
    Rotationfund = {{math.cos(theta1),-math.sin(theta1),0},{math.sin(theta1),math.cos(theta1),0},{0,0,1}};
    V_c3end = MatMul(Rotationfund,{{-L7},{-(L6+0.027)},{(L10+L8)}});
    --print(V_c3end)
    P_3end = MatAdd(P_center, V_c3end);
    --print(P_3end[1])
    a = math.sqrt(P_3end[1][1]^2+P_3end[2][1]^2+(P_3end[3][1]-L1)^2);
    --print("a " ..tostring(a))
    --print("Lentrian " ..tostring(L3+L5))
    phi = math.acos((math.sqrt(P_3end[1][1]^2+P_3end[2][1]^2))/a);
    gamma = math.acos((-L5^2+a^2+L3^2)/(2*L3*a));
    --print("gamma " ..tostring((-L5^2+a^2+L3^2)/(2*L3*a)))
    theta2 = -gamma-phi;
    --Find theta3
    epsilon = math.acos((a^2-L3^2-L5^2)/(-2*L3*L5));
    theta3 = math.pi - epsilon;
    --Find theta4
    eps = (math.pi/2) - phi;
    rho = math.pi - gamma - epsilon;
    theta4 = (math.pi/2)-rho-eps;
    --Group theta 1-6
    theta = {theta1,theta2,theta3,theta4,theta5,theta6};
    Theta = {}
    for i = 1, #theta do
    th = math.deg(theta[i])
    Theta[i] = th
    end
    --print('simulated angles are')
    print(Theta)
    --print('#####################')
    --]]

    return theta
    end
end

function sysCall_init()

    sensor=sim.getObjectAssociatedWithScript(sim.handle_self)
    sphereContainer=sim.addDrawingObject(sim.drawing_spherepoints,0.03,0,-1,9999,{1,0,1})
    local res
    res,nearClip=sim.getObjectFloatParameter(sensor,sim.visionfloatparam_near_clipping)
    res,farClip=sim.getObjectFloatParameter(sensor,sim.visionfloatparam_far_clipping)
    res,xAngle=sim.getObjectFloatParameter(sensor,sim.visionfloatparam_perspective_angle)
    res,resX=sim.getObjectInt32Parameter(sensor,sim.visionintparam_resolution_x)
    res,resY=sim.getObjectInt32Parameter(sensor,sim.visionintparam_resolution_y)
    yAngle=xAngle
    local ratio=resX/resY
    if resX>resY then
        yAngle=2*math.atan(math.tan(xAngle/2)/ratio)
    else
        xAngle=2*math.atan(math.tan(yAngle/2)/ratio)
    end

end

function sysCall_sensing()
    local distance={}
    local all_blobs={}
    local index_val=0
    local previous_distance=1000
    local m=sim.getObjectMatrix(sensor,-1)
    sim.addDrawingObjectItem(sphereContainer,nil)
    local res,packet1,packet2=sim.handleVisionSensor(sensor)
    --print(sim.getDoubleSignal("Front_Distance"))
    if res>=0 then
        local blobCnt=packet2[1]
        rear_blobCnt=sim.setDoubleSignal("rear_blobCnt",blobCnt)
        local valCnt=packet2[2]
                
        
        for i=0,blobCnt-1,1 do
            local blobSize=packet2[2+valCnt*i+1]
            local blobOrientation=packet2[2+valCnt*i+2]
            local blobPositionX=packet2[2+valCnt*i+3]
            local blobPositionY=packet2[2+valCnt*i+4]
            local blobWidth=packet2[2+valCnt*i+5]
            local blobHeight=packet2[2+valCnt*i+6]
            local depthV=sim.getVisionSensorDepthBuffer(sensor,1+math.floor(blobPositionX*(resX-0.99)),1+math.floor(blobPositionY*(resY-0.99)),1,1)
            local depth=nearClip+(farClip-nearClip)*depthV[1]
            local coord={0,0,depth}
            local x=0.5-blobPositionX
            local y=blobPositionY-0.5
            coord[1]=depth*math.tan(xAngle*0.5)*(0.5-blobPositionX)/0.5
            coord[2]=depth*math.tan(yAngle*0.5)*(blobPositionY-0.5)/0.5
            coord_w=sim.multiplyVector(m,coord)-- world coordinates...ish
            all_blobs[i]=coord
            distance[i]=((all_blobs[i][1])^2+(all_blobs[i][3])^2+(all_blobs[i][2])^2)^0.5
            local dist=distance[i]
            if dist<previous_distance then
                previous_distance=dist
                index_val=i
                
            end
            -- coord now contains the position of the blob, in world coordinates
            sim.addDrawingObjectItem(sphereContainer,coord_w)
            
        end
        
        if blobCnt >0 then
            rear_sample=true
            --print(index_val)
            local min_distance=previous_distance
            local nearest=all_blobs[index_val]
            --print(nearest)
            local X=nearest[1]
            local Z=nearest[3]
            local V=X/Z
            rear_heading_to_closest=math.asin(V)*180/math.pi
        
                --print("Rear Sample Detected. Distance:     "..tostring(min_distance) .. "     Heading:     " .. tostring(rear_heading_to_closest))
                sim.setDoubleSignal("Rear_Distance",min_distance)
                sim.setDoubleSignal("Rear_Heading",rear_heading_to_closest)
            
            --print("Heading to nearest sample:      ",heading_to_closest,"degrees")

        else 
            rear_blobCnt=sim.setDoubleSignal("rear_blobCnt",0)
            rear_sample=false
            --print("No Sample Detected")
        end
       
       
        end
        
        
        
    
end

function sysCall_cleanup()
    sim.removeDrawingObject(sphereContainer)
end
